"""
Fetches version information from the underlying repository

Copyright (C) 2020 The Veles Core developers

This program is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation, either version 3
of the License, or (at your option) any later version.
"""
import codecs
import copy
import json
import os
import re
import subprocess
import time
from datetime import datetime

import dateutil.parser

class VersionQuery(object):
	""" Constructor, can take base path of repo """
	def __init__(self, path = None):
		self.path = path
		self.output_file = 'public/js/version.js'

	def save_version_info(self):
		version = self.fetch_version_info()

		try:
			print("Veles Core Website version {}".format(version['version']))
			self.save_result(
				self.output_file, 
				"""/* Do not edit this file manually, it will be overwritten after next build */
var appVersion = """ + json.dumps(version) + ";"
				)
		except Exception as e:
			print("Failed to fetch application version information from git", e)

	def fetch_version_info(self):
		return {
			'version': self.fetch_last_version(),
			'environment': self.fetch_branch_type(),
		}

	def fetch_last_version(self):
		cmd = 'git tag | sort -V | head -1'
		output = subprocess.check_output(cmd, cwd=self.path if self.path else '.', shell=True)
		#lines = output.decode("utf-8").split("\n")

		if not output:
			print('Failed to get git info')
			return {}

		return output.decode("utf-8").strip()

	def fetch_branch_type(self):
		cmd = 'git --no-pager log --decorate=full -n 1 | head -n 1 | grep production > /dev/null && echo "production" || echo "development"'
		output = subprocess.check_output(cmd, cwd=self.path if self.path else '.', shell=True)
		#lines = output.decode("utf-8").split("\n")

		if not output:
			print('Failed to get git info')
			return {}

		return output.decode("utf-8").strip()

	def save_result(self, filename, result):
		if not os.path.isdir(os.path.dirname(filename)):
			os.makedirs(os.path.dirname(filename))

		with codecs.open(filename, 'w', 'utf-8') as fh:
			fh.write(result)
